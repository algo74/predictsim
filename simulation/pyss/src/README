
***** Pyss
the Python Scheduler Simulator


*** Notes on schedulers:
** alpha_easy_scheduler
Useless scheduler.

** common_dist_easy_plus_plus_scheduler
It's easy_plus_plus_scheduler with a dirty patch were all users are the same.

** conservative_scheduler
Pure conservative scheduler.

** double_conservative_scheduler
this scheduler only doubles the user estimation and then apply the regular Conservative Scheduler
TODO: add a test that compare this to conservative_prediction_scheduler (predictor = double_reqtime)

** double_easy_backfill_scheduler
this scheduler only doubles the user estimation and then apply the regular Easy Backfill Scheduler
TODO: add a test that compare this to easy_prediction_scheduler (predictor = double_reqtime)

** double_perfect_easy_backfill_scheduler
this scheduler only doubles the REAL runtime and then apply the regular Easy Backfill Scheduler
TODO: add a test that compare this to easy_prediction_scheduler (predictor = double_runtime)

** easy_backfill_scheduler
Pure easy backfill scheduler

** easy_plus_plus_scheduler
This algorithm implements the algorithm in the paper of Tsafrir, Etzion, Feitelson, june 2007?
This algo need predictor/corrector.
TODO: verify the algo

** easy_sjbf_scheduler
Pure SJBF (shortest job backfilled first) scheduler

** fcfs_scheduler
Pure FCFS

** greedy_easy_backfill_scheduler
EasyBackfillScheduler where jobs can be sorted in different orders.
TODO: scheduler parameters should be taken from "options" (ie. the config file) not from python parameters.
TODO: with the good parameters it should be the same as easy_sjbf_scheduler

** head_double_easy_scheduler
EasyBackfillScheduler where only the non-backfilled job have their predicted runtime = 2*reqtime
I don't see the purpose of this scheduler.

** lookahead_easy_backfill_scheduler
This scheduler implements the LOS Scheduling Algorithm

** maui_scheduler
The maui scheduler, easy backfilling with jobs sorted by a combinaison of factors.

** orig_common_dist_probabilistic_easy_scheduler
orig_probabilistic_easy_scheduler with only one user (all users are overridden as one unique suer (yes it's a dirty hack))

** orig_probabilistic_easy_scheduler
This algorithm implements a version of Feitelson and Nissimov, June 2007.

** perfect_easy_backfill_scheduler
EasyBackfillScheduler whith prediction=runtime
TODO: make a test to compare results

** reverse_easy_scheduler
EasyBackfillScheduler where lasts jobs are backfilled first

** shrinking_easy_scheduler
EasyBackfillScheduler(predictor=reqtime/2, corrector=reqtime)
TODO: make a test to compare both version

** tail_double_easy_scheduler
EasyBackfillScheduler where predicted_runtime is doubled when backfilling is done







time pypy -OO -m cProfile -o simul.cprof ./run_simulator.py '../../../experiments/data/CEA-curie_sample/swf_unfiltered/log.swf' sample_config_profiling.py res.swf






*** Run exemples:

** normal run:
time pypy -OO -m cProfile -o simul.cprof ./run_simulator.py sample_config_profiling.py


** debug:
pypy ./run_simulator.py sample_config.py


** profiling/optimizing:
time pypy -OO -m cProfile -o simul.cprof ./run_simulator.py sample_config_profiling.py

time pypy -OO -m cProfile -o simul.cprof ./run_simulator.py '../../../experiments/data/CEA-curie_sample/swf/log.swf' sample_config_profiling.py res.swf


runsnake simul.cprof





*** How to test pyss?
./runtests.sh






*** Exemples of runs:

$ pypy -m cProfile -o simul.cprof ./run_simulator.py sample_config.py

WARINING: [..]
[..]

STATISTICS: 
Wait (Tw) [minutes]:  61.5191506329
Response time (Tw+Tr) [minutes]:  184.139470291
Slowdown (Tw+Tr) / Tr:  405.583038621
Bounded slowdown max(1, (Tw+Tr) / max(10, Tr):  63.930142519
Estimated slowdown (Tw+Tr) / Te:  306.14067403
Tail slowdown (if bounded_sld >= 3):  419.9131661
   Number of jobs in the tail:  1474
Tail Percentile (the top 10% sld):  4036.43339341
Total Number of jobs:  9924
Number of jobs used to calculate statistics:  9823

Num of Processors:  80640
Input file:  ../../../data/CEA-curie_sample/original_swf/log.swf
Scheduler: <class 'schedulers.easy_scheduler.EasyBackfillScheduler'>



$ pypy -m cProfile -o simul.cprof ./run_simulator.py sample_config2.py

WARINING: [..]
[..]

STATISTICS: 
Wait (Tw) [minutes]:  63.8220180529
Response time (Tw+Tr) [minutes]:  186.442337711
Slowdown (Tw+Tr) / Tr:  438.943506263
Bounded slowdown max(1, (Tw+Tr) / max(10, Tr):  71.2782829212
Estimated slowdown (Tw+Tr) / Te:  350.31818206
Tail slowdown (if bounded_sld >= 3):  536.229754526
   Number of jobs in the tail:  1289
Tail Percentile (the top 10% sld):  4371.72912372
Total Number of jobs:  9924
Number of jobs used to calculate statistics:  9823

Num of Processors:  80640
Input file:  ../../../data/CEA-curie_sample/original_swf/log.swf
Scheduler: <class 'schedulers.easy_plus_plus_scheduler.EasyPlusPlusScheduler'>




df2gantt(swf_read('../../simulation/pyss/src/res.swf'))




*** To remove assert I did :
for i in schedulers/*.py ; do  sed -i 's/assert /pass #assert /g' $i ; done
for i in base/*.py ; do  sed -i 's/assert /pass #assert /g' $i ; done
